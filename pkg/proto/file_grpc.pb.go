// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/proto/file.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcFileClient is the client API for RpcFile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcFileClient interface {
	Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenReply, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error)
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteReply, error)
	Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseReply, error)
	Fsync(ctx context.Context, in *FsyncRequest, opts ...grpc.CallOption) (*FsyncReply, error)
	Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*FlushReply, error)
	GetLk(ctx context.Context, in *GetLkRequest, opts ...grpc.CallOption) (*GetLkReply, error)
	SetLk(ctx context.Context, in *SetLkRequest, opts ...grpc.CallOption) (*SetLkReply, error)
	SetLkw(ctx context.Context, in *SetLkwRequest, opts ...grpc.CallOption) (*SetLkwReply, error)
	Allocate(ctx context.Context, in *AllocateRequest, opts ...grpc.CallOption) (*AllocateReply, error)
}

type rpcFileClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcFileClient(cc grpc.ClientConnInterface) RpcFileClient {
	return &rpcFileClient{cc}
}

func (c *rpcFileClient) Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenReply, error) {
	out := new(OpenReply)
	err := c.cc.Invoke(ctx, "/gmountie.RpcFile/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcFileClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, "/gmountie.RpcFile/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcFileClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error) {
	out := new(ReadReply)
	err := c.cc.Invoke(ctx, "/gmountie.RpcFile/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcFileClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteReply, error) {
	out := new(WriteReply)
	err := c.cc.Invoke(ctx, "/gmountie.RpcFile/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcFileClient) Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseReply, error) {
	out := new(ReleaseReply)
	err := c.cc.Invoke(ctx, "/gmountie.RpcFile/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcFileClient) Fsync(ctx context.Context, in *FsyncRequest, opts ...grpc.CallOption) (*FsyncReply, error) {
	out := new(FsyncReply)
	err := c.cc.Invoke(ctx, "/gmountie.RpcFile/Fsync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcFileClient) Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*FlushReply, error) {
	out := new(FlushReply)
	err := c.cc.Invoke(ctx, "/gmountie.RpcFile/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcFileClient) GetLk(ctx context.Context, in *GetLkRequest, opts ...grpc.CallOption) (*GetLkReply, error) {
	out := new(GetLkReply)
	err := c.cc.Invoke(ctx, "/gmountie.RpcFile/GetLk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcFileClient) SetLk(ctx context.Context, in *SetLkRequest, opts ...grpc.CallOption) (*SetLkReply, error) {
	out := new(SetLkReply)
	err := c.cc.Invoke(ctx, "/gmountie.RpcFile/SetLk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcFileClient) SetLkw(ctx context.Context, in *SetLkwRequest, opts ...grpc.CallOption) (*SetLkwReply, error) {
	out := new(SetLkwReply)
	err := c.cc.Invoke(ctx, "/gmountie.RpcFile/SetLkw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcFileClient) Allocate(ctx context.Context, in *AllocateRequest, opts ...grpc.CallOption) (*AllocateReply, error) {
	out := new(AllocateReply)
	err := c.cc.Invoke(ctx, "/gmountie.RpcFile/Allocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcFileServer is the server API for RpcFile service.
// All implementations must embed UnimplementedRpcFileServer
// for forward compatibility
type RpcFileServer interface {
	Open(context.Context, *OpenRequest) (*OpenReply, error)
	Create(context.Context, *CreateRequest) (*CreateReply, error)
	Read(context.Context, *ReadRequest) (*ReadReply, error)
	Write(context.Context, *WriteRequest) (*WriteReply, error)
	Release(context.Context, *ReleaseRequest) (*ReleaseReply, error)
	Fsync(context.Context, *FsyncRequest) (*FsyncReply, error)
	Flush(context.Context, *FlushRequest) (*FlushReply, error)
	GetLk(context.Context, *GetLkRequest) (*GetLkReply, error)
	SetLk(context.Context, *SetLkRequest) (*SetLkReply, error)
	SetLkw(context.Context, *SetLkwRequest) (*SetLkwReply, error)
	Allocate(context.Context, *AllocateRequest) (*AllocateReply, error)
	mustEmbedUnimplementedRpcFileServer()
}

// UnimplementedRpcFileServer must be embedded to have forward compatible implementations.
type UnimplementedRpcFileServer struct {
}

func (UnimplementedRpcFileServer) Open(context.Context, *OpenRequest) (*OpenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedRpcFileServer) Create(context.Context, *CreateRequest) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRpcFileServer) Read(context.Context, *ReadRequest) (*ReadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedRpcFileServer) Write(context.Context, *WriteRequest) (*WriteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedRpcFileServer) Release(context.Context, *ReleaseRequest) (*ReleaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (UnimplementedRpcFileServer) Fsync(context.Context, *FsyncRequest) (*FsyncReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fsync not implemented")
}
func (UnimplementedRpcFileServer) Flush(context.Context, *FlushRequest) (*FlushReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (UnimplementedRpcFileServer) GetLk(context.Context, *GetLkRequest) (*GetLkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLk not implemented")
}
func (UnimplementedRpcFileServer) SetLk(context.Context, *SetLkRequest) (*SetLkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLk not implemented")
}
func (UnimplementedRpcFileServer) SetLkw(context.Context, *SetLkwRequest) (*SetLkwReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLkw not implemented")
}
func (UnimplementedRpcFileServer) Allocate(context.Context, *AllocateRequest) (*AllocateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allocate not implemented")
}
func (UnimplementedRpcFileServer) mustEmbedUnimplementedRpcFileServer() {}

// UnsafeRpcFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcFileServer will
// result in compilation errors.
type UnsafeRpcFileServer interface {
	mustEmbedUnimplementedRpcFileServer()
}

func RegisterRpcFileServer(s grpc.ServiceRegistrar, srv RpcFileServer) {
	s.RegisterService(&RpcFile_ServiceDesc, srv)
}

func _RpcFile_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcFileServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gmountie.RpcFile/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcFileServer).Open(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcFile_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcFileServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gmountie.RpcFile/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcFileServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcFile_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcFileServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gmountie.RpcFile/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcFileServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcFile_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcFileServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gmountie.RpcFile/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcFileServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcFile_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcFileServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gmountie.RpcFile/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcFileServer).Release(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcFile_Fsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcFileServer).Fsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gmountie.RpcFile/Fsync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcFileServer).Fsync(ctx, req.(*FsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcFile_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcFileServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gmountie.RpcFile/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcFileServer).Flush(ctx, req.(*FlushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcFile_GetLk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcFileServer).GetLk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gmountie.RpcFile/GetLk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcFileServer).GetLk(ctx, req.(*GetLkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcFile_SetLk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcFileServer).SetLk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gmountie.RpcFile/SetLk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcFileServer).SetLk(ctx, req.(*SetLkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcFile_SetLkw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLkwRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcFileServer).SetLkw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gmountie.RpcFile/SetLkw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcFileServer).SetLkw(ctx, req.(*SetLkwRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcFile_Allocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcFileServer).Allocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gmountie.RpcFile/Allocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcFileServer).Allocate(ctx, req.(*AllocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcFile_ServiceDesc is the grpc.ServiceDesc for RpcFile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcFile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gmountie.RpcFile",
	HandlerType: (*RpcFileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _RpcFile_Open_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RpcFile_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _RpcFile_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _RpcFile_Write_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _RpcFile_Release_Handler,
		},
		{
			MethodName: "Fsync",
			Handler:    _RpcFile_Fsync_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _RpcFile_Flush_Handler,
		},
		{
			MethodName: "GetLk",
			Handler:    _RpcFile_GetLk_Handler,
		},
		{
			MethodName: "SetLk",
			Handler:    _RpcFile_SetLk_Handler,
		},
		{
			MethodName: "SetLkw",
			Handler:    _RpcFile_SetLkw_Handler,
		},
		{
			MethodName: "Allocate",
			Handler:    _RpcFile_Allocate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/file.proto",
}
