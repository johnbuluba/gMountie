// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/proto/file.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcFileClient is the client API for RpcFile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcFileClient interface {
	Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenReply, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error)
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteReply, error)
}

type rpcFileClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcFileClient(cc grpc.ClientConnInterface) RpcFileClient {
	return &rpcFileClient{cc}
}

func (c *rpcFileClient) Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenReply, error) {
	out := new(OpenReply)
	err := c.cc.Invoke(ctx, "/grpc_fs.RpcFile/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcFileClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, "/grpc_fs.RpcFile/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcFileClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error) {
	out := new(ReadReply)
	err := c.cc.Invoke(ctx, "/grpc_fs.RpcFile/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcFileClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteReply, error) {
	out := new(WriteReply)
	err := c.cc.Invoke(ctx, "/grpc_fs.RpcFile/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcFileServer is the server API for RpcFile service.
// All implementations must embed UnimplementedRpcFileServer
// for forward compatibility
type RpcFileServer interface {
	Open(context.Context, *OpenRequest) (*OpenReply, error)
	Create(context.Context, *CreateRequest) (*CreateReply, error)
	Read(context.Context, *ReadRequest) (*ReadReply, error)
	Write(context.Context, *WriteRequest) (*WriteReply, error)
	mustEmbedUnimplementedRpcFileServer()
}

// UnimplementedRpcFileServer must be embedded to have forward compatible implementations.
type UnimplementedRpcFileServer struct {
}

func (UnimplementedRpcFileServer) Open(context.Context, *OpenRequest) (*OpenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedRpcFileServer) Create(context.Context, *CreateRequest) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRpcFileServer) Read(context.Context, *ReadRequest) (*ReadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedRpcFileServer) Write(context.Context, *WriteRequest) (*WriteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedRpcFileServer) mustEmbedUnimplementedRpcFileServer() {}

// UnsafeRpcFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcFileServer will
// result in compilation errors.
type UnsafeRpcFileServer interface {
	mustEmbedUnimplementedRpcFileServer()
}

func RegisterRpcFileServer(s grpc.ServiceRegistrar, srv RpcFileServer) {
	s.RegisterService(&RpcFile_ServiceDesc, srv)
}

func _RpcFile_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcFileServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_fs.RpcFile/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcFileServer).Open(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcFile_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcFileServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_fs.RpcFile/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcFileServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcFile_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcFileServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_fs.RpcFile/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcFileServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcFile_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcFileServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_fs.RpcFile/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcFileServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcFile_ServiceDesc is the grpc.ServiceDesc for RpcFile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcFile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_fs.RpcFile",
	HandlerType: (*RpcFileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _RpcFile_Open_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RpcFile_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _RpcFile_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _RpcFile_Write_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/file.proto",
}
