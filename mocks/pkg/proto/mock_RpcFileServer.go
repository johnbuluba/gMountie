// Code generated by mockery v2.46.3. DO NOT EDIT.

package proto

import (
	context "context"
	proto "gmountie/pkg/proto"

	mock "github.com/stretchr/testify/mock"
)

// MockRpcFileServer is an autogenerated mock type for the RpcFileServer type
type MockRpcFileServer struct {
	mock.Mock
}

type MockRpcFileServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRpcFileServer) EXPECT() *MockRpcFileServer_Expecter {
	return &MockRpcFileServer_Expecter{mock: &_m.Mock}
}

// Allocate provides a mock function with given fields: _a0, _a1
func (_m *MockRpcFileServer) Allocate(_a0 context.Context, _a1 *proto.AllocateRequest) (*proto.AllocateReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Allocate")
	}

	var r0 *proto.AllocateReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.AllocateRequest) (*proto.AllocateReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.AllocateRequest) *proto.AllocateReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.AllocateReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.AllocateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRpcFileServer_Allocate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Allocate'
type MockRpcFileServer_Allocate_Call struct {
	*mock.Call
}

// Allocate is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.AllocateRequest
func (_e *MockRpcFileServer_Expecter) Allocate(_a0 interface{}, _a1 interface{}) *MockRpcFileServer_Allocate_Call {
	return &MockRpcFileServer_Allocate_Call{Call: _e.mock.On("Allocate", _a0, _a1)}
}

func (_c *MockRpcFileServer_Allocate_Call) Run(run func(_a0 context.Context, _a1 *proto.AllocateRequest)) *MockRpcFileServer_Allocate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.AllocateRequest))
	})
	return _c
}

func (_c *MockRpcFileServer_Allocate_Call) Return(_a0 *proto.AllocateReply, _a1 error) *MockRpcFileServer_Allocate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRpcFileServer_Allocate_Call) RunAndReturn(run func(context.Context, *proto.AllocateRequest) (*proto.AllocateReply, error)) *MockRpcFileServer_Allocate_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *MockRpcFileServer) Create(_a0 context.Context, _a1 *proto.CreateRequest) (*proto.CreateReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *proto.CreateReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateRequest) (*proto.CreateReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.CreateRequest) *proto.CreateReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CreateReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.CreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRpcFileServer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRpcFileServer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.CreateRequest
func (_e *MockRpcFileServer_Expecter) Create(_a0 interface{}, _a1 interface{}) *MockRpcFileServer_Create_Call {
	return &MockRpcFileServer_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *MockRpcFileServer_Create_Call) Run(run func(_a0 context.Context, _a1 *proto.CreateRequest)) *MockRpcFileServer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.CreateRequest))
	})
	return _c
}

func (_c *MockRpcFileServer_Create_Call) Return(_a0 *proto.CreateReply, _a1 error) *MockRpcFileServer_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRpcFileServer_Create_Call) RunAndReturn(run func(context.Context, *proto.CreateRequest) (*proto.CreateReply, error)) *MockRpcFileServer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function with given fields: _a0, _a1
func (_m *MockRpcFileServer) Flush(_a0 context.Context, _a1 *proto.FlushRequest) (*proto.FlushReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 *proto.FlushReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.FlushRequest) (*proto.FlushReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.FlushRequest) *proto.FlushReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.FlushReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.FlushRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRpcFileServer_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockRpcFileServer_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.FlushRequest
func (_e *MockRpcFileServer_Expecter) Flush(_a0 interface{}, _a1 interface{}) *MockRpcFileServer_Flush_Call {
	return &MockRpcFileServer_Flush_Call{Call: _e.mock.On("Flush", _a0, _a1)}
}

func (_c *MockRpcFileServer_Flush_Call) Run(run func(_a0 context.Context, _a1 *proto.FlushRequest)) *MockRpcFileServer_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.FlushRequest))
	})
	return _c
}

func (_c *MockRpcFileServer_Flush_Call) Return(_a0 *proto.FlushReply, _a1 error) *MockRpcFileServer_Flush_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRpcFileServer_Flush_Call) RunAndReturn(run func(context.Context, *proto.FlushRequest) (*proto.FlushReply, error)) *MockRpcFileServer_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Fsync provides a mock function with given fields: _a0, _a1
func (_m *MockRpcFileServer) Fsync(_a0 context.Context, _a1 *proto.FsyncRequest) (*proto.FsyncReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Fsync")
	}

	var r0 *proto.FsyncReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.FsyncRequest) (*proto.FsyncReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.FsyncRequest) *proto.FsyncReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.FsyncReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.FsyncRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRpcFileServer_Fsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fsync'
type MockRpcFileServer_Fsync_Call struct {
	*mock.Call
}

// Fsync is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.FsyncRequest
func (_e *MockRpcFileServer_Expecter) Fsync(_a0 interface{}, _a1 interface{}) *MockRpcFileServer_Fsync_Call {
	return &MockRpcFileServer_Fsync_Call{Call: _e.mock.On("Fsync", _a0, _a1)}
}

func (_c *MockRpcFileServer_Fsync_Call) Run(run func(_a0 context.Context, _a1 *proto.FsyncRequest)) *MockRpcFileServer_Fsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.FsyncRequest))
	})
	return _c
}

func (_c *MockRpcFileServer_Fsync_Call) Return(_a0 *proto.FsyncReply, _a1 error) *MockRpcFileServer_Fsync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRpcFileServer_Fsync_Call) RunAndReturn(run func(context.Context, *proto.FsyncRequest) (*proto.FsyncReply, error)) *MockRpcFileServer_Fsync_Call {
	_c.Call.Return(run)
	return _c
}

// GetLk provides a mock function with given fields: _a0, _a1
func (_m *MockRpcFileServer) GetLk(_a0 context.Context, _a1 *proto.GetLkRequest) (*proto.GetLkReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetLk")
	}

	var r0 *proto.GetLkReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetLkRequest) (*proto.GetLkReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetLkRequest) *proto.GetLkReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetLkReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetLkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRpcFileServer_GetLk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLk'
type MockRpcFileServer_GetLk_Call struct {
	*mock.Call
}

// GetLk is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.GetLkRequest
func (_e *MockRpcFileServer_Expecter) GetLk(_a0 interface{}, _a1 interface{}) *MockRpcFileServer_GetLk_Call {
	return &MockRpcFileServer_GetLk_Call{Call: _e.mock.On("GetLk", _a0, _a1)}
}

func (_c *MockRpcFileServer_GetLk_Call) Run(run func(_a0 context.Context, _a1 *proto.GetLkRequest)) *MockRpcFileServer_GetLk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.GetLkRequest))
	})
	return _c
}

func (_c *MockRpcFileServer_GetLk_Call) Return(_a0 *proto.GetLkReply, _a1 error) *MockRpcFileServer_GetLk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRpcFileServer_GetLk_Call) RunAndReturn(run func(context.Context, *proto.GetLkRequest) (*proto.GetLkReply, error)) *MockRpcFileServer_GetLk_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: _a0, _a1
func (_m *MockRpcFileServer) Open(_a0 context.Context, _a1 *proto.OpenRequest) (*proto.OpenReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 *proto.OpenReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.OpenRequest) (*proto.OpenReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.OpenRequest) *proto.OpenReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.OpenReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.OpenRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRpcFileServer_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockRpcFileServer_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.OpenRequest
func (_e *MockRpcFileServer_Expecter) Open(_a0 interface{}, _a1 interface{}) *MockRpcFileServer_Open_Call {
	return &MockRpcFileServer_Open_Call{Call: _e.mock.On("Open", _a0, _a1)}
}

func (_c *MockRpcFileServer_Open_Call) Run(run func(_a0 context.Context, _a1 *proto.OpenRequest)) *MockRpcFileServer_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.OpenRequest))
	})
	return _c
}

func (_c *MockRpcFileServer_Open_Call) Return(_a0 *proto.OpenReply, _a1 error) *MockRpcFileServer_Open_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRpcFileServer_Open_Call) RunAndReturn(run func(context.Context, *proto.OpenRequest) (*proto.OpenReply, error)) *MockRpcFileServer_Open_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: _a0, _a1
func (_m *MockRpcFileServer) Read(_a0 context.Context, _a1 *proto.ReadRequest) (*proto.ReadReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *proto.ReadReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ReadRequest) (*proto.ReadReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ReadRequest) *proto.ReadReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ReadReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.ReadRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRpcFileServer_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockRpcFileServer_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.ReadRequest
func (_e *MockRpcFileServer_Expecter) Read(_a0 interface{}, _a1 interface{}) *MockRpcFileServer_Read_Call {
	return &MockRpcFileServer_Read_Call{Call: _e.mock.On("Read", _a0, _a1)}
}

func (_c *MockRpcFileServer_Read_Call) Run(run func(_a0 context.Context, _a1 *proto.ReadRequest)) *MockRpcFileServer_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.ReadRequest))
	})
	return _c
}

func (_c *MockRpcFileServer_Read_Call) Return(_a0 *proto.ReadReply, _a1 error) *MockRpcFileServer_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRpcFileServer_Read_Call) RunAndReturn(run func(context.Context, *proto.ReadRequest) (*proto.ReadReply, error)) *MockRpcFileServer_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Release provides a mock function with given fields: _a0, _a1
func (_m *MockRpcFileServer) Release(_a0 context.Context, _a1 *proto.ReleaseRequest) (*proto.ReleaseReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Release")
	}

	var r0 *proto.ReleaseReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ReleaseRequest) (*proto.ReleaseReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ReleaseRequest) *proto.ReleaseReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ReleaseReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.ReleaseRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRpcFileServer_Release_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Release'
type MockRpcFileServer_Release_Call struct {
	*mock.Call
}

// Release is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.ReleaseRequest
func (_e *MockRpcFileServer_Expecter) Release(_a0 interface{}, _a1 interface{}) *MockRpcFileServer_Release_Call {
	return &MockRpcFileServer_Release_Call{Call: _e.mock.On("Release", _a0, _a1)}
}

func (_c *MockRpcFileServer_Release_Call) Run(run func(_a0 context.Context, _a1 *proto.ReleaseRequest)) *MockRpcFileServer_Release_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.ReleaseRequest))
	})
	return _c
}

func (_c *MockRpcFileServer_Release_Call) Return(_a0 *proto.ReleaseReply, _a1 error) *MockRpcFileServer_Release_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRpcFileServer_Release_Call) RunAndReturn(run func(context.Context, *proto.ReleaseRequest) (*proto.ReleaseReply, error)) *MockRpcFileServer_Release_Call {
	_c.Call.Return(run)
	return _c
}

// SetLk provides a mock function with given fields: _a0, _a1
func (_m *MockRpcFileServer) SetLk(_a0 context.Context, _a1 *proto.SetLkRequest) (*proto.SetLkReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetLk")
	}

	var r0 *proto.SetLkReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SetLkRequest) (*proto.SetLkReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SetLkRequest) *proto.SetLkReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SetLkReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.SetLkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRpcFileServer_SetLk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLk'
type MockRpcFileServer_SetLk_Call struct {
	*mock.Call
}

// SetLk is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.SetLkRequest
func (_e *MockRpcFileServer_Expecter) SetLk(_a0 interface{}, _a1 interface{}) *MockRpcFileServer_SetLk_Call {
	return &MockRpcFileServer_SetLk_Call{Call: _e.mock.On("SetLk", _a0, _a1)}
}

func (_c *MockRpcFileServer_SetLk_Call) Run(run func(_a0 context.Context, _a1 *proto.SetLkRequest)) *MockRpcFileServer_SetLk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.SetLkRequest))
	})
	return _c
}

func (_c *MockRpcFileServer_SetLk_Call) Return(_a0 *proto.SetLkReply, _a1 error) *MockRpcFileServer_SetLk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRpcFileServer_SetLk_Call) RunAndReturn(run func(context.Context, *proto.SetLkRequest) (*proto.SetLkReply, error)) *MockRpcFileServer_SetLk_Call {
	_c.Call.Return(run)
	return _c
}

// SetLkw provides a mock function with given fields: _a0, _a1
func (_m *MockRpcFileServer) SetLkw(_a0 context.Context, _a1 *proto.SetLkwRequest) (*proto.SetLkwReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetLkw")
	}

	var r0 *proto.SetLkwReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SetLkwRequest) (*proto.SetLkwReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SetLkwRequest) *proto.SetLkwReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SetLkwReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.SetLkwRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRpcFileServer_SetLkw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLkw'
type MockRpcFileServer_SetLkw_Call struct {
	*mock.Call
}

// SetLkw is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.SetLkwRequest
func (_e *MockRpcFileServer_Expecter) SetLkw(_a0 interface{}, _a1 interface{}) *MockRpcFileServer_SetLkw_Call {
	return &MockRpcFileServer_SetLkw_Call{Call: _e.mock.On("SetLkw", _a0, _a1)}
}

func (_c *MockRpcFileServer_SetLkw_Call) Run(run func(_a0 context.Context, _a1 *proto.SetLkwRequest)) *MockRpcFileServer_SetLkw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.SetLkwRequest))
	})
	return _c
}

func (_c *MockRpcFileServer_SetLkw_Call) Return(_a0 *proto.SetLkwReply, _a1 error) *MockRpcFileServer_SetLkw_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRpcFileServer_SetLkw_Call) RunAndReturn(run func(context.Context, *proto.SetLkwRequest) (*proto.SetLkwReply, error)) *MockRpcFileServer_SetLkw_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: _a0, _a1
func (_m *MockRpcFileServer) Write(_a0 context.Context, _a1 *proto.WriteRequest) (*proto.WriteReply, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 *proto.WriteReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.WriteRequest) (*proto.WriteReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.WriteRequest) *proto.WriteReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.WriteReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.WriteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRpcFileServer_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockRpcFileServer_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *proto.WriteRequest
func (_e *MockRpcFileServer_Expecter) Write(_a0 interface{}, _a1 interface{}) *MockRpcFileServer_Write_Call {
	return &MockRpcFileServer_Write_Call{Call: _e.mock.On("Write", _a0, _a1)}
}

func (_c *MockRpcFileServer_Write_Call) Run(run func(_a0 context.Context, _a1 *proto.WriteRequest)) *MockRpcFileServer_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.WriteRequest))
	})
	return _c
}

func (_c *MockRpcFileServer_Write_Call) Return(_a0 *proto.WriteReply, _a1 error) *MockRpcFileServer_Write_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRpcFileServer_Write_Call) RunAndReturn(run func(context.Context, *proto.WriteRequest) (*proto.WriteReply, error)) *MockRpcFileServer_Write_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedRpcFileServer provides a mock function with given fields:
func (_m *MockRpcFileServer) mustEmbedUnimplementedRpcFileServer() {
	_m.Called()
}

// MockRpcFileServer_mustEmbedUnimplementedRpcFileServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedRpcFileServer'
type MockRpcFileServer_mustEmbedUnimplementedRpcFileServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedRpcFileServer is a helper method to define mock.On call
func (_e *MockRpcFileServer_Expecter) mustEmbedUnimplementedRpcFileServer() *MockRpcFileServer_mustEmbedUnimplementedRpcFileServer_Call {
	return &MockRpcFileServer_mustEmbedUnimplementedRpcFileServer_Call{Call: _e.mock.On("mustEmbedUnimplementedRpcFileServer")}
}

func (_c *MockRpcFileServer_mustEmbedUnimplementedRpcFileServer_Call) Run(run func()) *MockRpcFileServer_mustEmbedUnimplementedRpcFileServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRpcFileServer_mustEmbedUnimplementedRpcFileServer_Call) Return() *MockRpcFileServer_mustEmbedUnimplementedRpcFileServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRpcFileServer_mustEmbedUnimplementedRpcFileServer_Call) RunAndReturn(run func()) *MockRpcFileServer_mustEmbedUnimplementedRpcFileServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRpcFileServer creates a new instance of MockRpcFileServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRpcFileServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRpcFileServer {
	mock := &MockRpcFileServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
