// Code generated by mockery v2.46.3. DO NOT EDIT.

package service

import (
	context "context"
	service "gmountie/pkg/server/service"

	mock "github.com/stretchr/testify/mock"
)

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function with given fields: ctx, method
func (_m *MockAuthService) Authorize(ctx context.Context, method string) (bool, *service.UserDetails, error) {
	ret := _m.Called(ctx, method)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 bool
	var r1 *service.UserDetails
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, *service.UserDetails, error)); ok {
		return rf(ctx, method)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, method)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *service.UserDetails); ok {
		r1 = rf(ctx, method)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*service.UserDetails)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, method)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuthService_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type MockAuthService_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - ctx context.Context
//   - method string
func (_e *MockAuthService_Expecter) Authorize(ctx interface{}, method interface{}) *MockAuthService_Authorize_Call {
	return &MockAuthService_Authorize_Call{Call: _e.mock.On("Authorize", ctx, method)}
}

func (_c *MockAuthService_Authorize_Call) Run(run func(ctx context.Context, method string)) *MockAuthService_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_Authorize_Call) Return(_a0 bool, _a1 *service.UserDetails, _a2 error) *MockAuthService_Authorize_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAuthService_Authorize_Call) RunAndReturn(run func(context.Context, string) (bool, *service.UserDetails, error)) *MockAuthService_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
