// Code generated by mockery v2.46.3. DO NOT EDIT.

package proto

import mock "github.com/stretchr/testify/mock"

// MockUnsafeRpcFsServer is an autogenerated mock type for the UnsafeRpcFsServer type
type MockUnsafeRpcFsServer struct {
	mock.Mock
}

type MockUnsafeRpcFsServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUnsafeRpcFsServer) EXPECT() *MockUnsafeRpcFsServer_Expecter {
	return &MockUnsafeRpcFsServer_Expecter{mock: &_m.Mock}
}

// mustEmbedUnimplementedRpcFsServer provides a mock function with given fields:
func (_m *MockUnsafeRpcFsServer) mustEmbedUnimplementedRpcFsServer() {
	_m.Called()
}

// MockUnsafeRpcFsServer_mustEmbedUnimplementedRpcFsServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedRpcFsServer'
type MockUnsafeRpcFsServer_mustEmbedUnimplementedRpcFsServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedRpcFsServer is a helper method to define mock.On call
func (_e *MockUnsafeRpcFsServer_Expecter) mustEmbedUnimplementedRpcFsServer() *MockUnsafeRpcFsServer_mustEmbedUnimplementedRpcFsServer_Call {
	return &MockUnsafeRpcFsServer_mustEmbedUnimplementedRpcFsServer_Call{Call: _e.mock.On("mustEmbedUnimplementedRpcFsServer")}
}

func (_c *MockUnsafeRpcFsServer_mustEmbedUnimplementedRpcFsServer_Call) Run(run func()) *MockUnsafeRpcFsServer_mustEmbedUnimplementedRpcFsServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUnsafeRpcFsServer_mustEmbedUnimplementedRpcFsServer_Call) Return() *MockUnsafeRpcFsServer_mustEmbedUnimplementedRpcFsServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUnsafeRpcFsServer_mustEmbedUnimplementedRpcFsServer_Call) RunAndReturn(run func()) *MockUnsafeRpcFsServer_mustEmbedUnimplementedRpcFsServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUnsafeRpcFsServer creates a new instance of MockUnsafeRpcFsServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUnsafeRpcFsServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUnsafeRpcFsServer {
	mock := &MockUnsafeRpcFsServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
