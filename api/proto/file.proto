syntax = "proto3";
package gmountie;
option go_package = "pkg/proto";

import "api/proto/common.proto";

message FileLock {
  uint64 start = 1;
  uint64 end = 2;
  uint32 typ = 3;
  uint32 pid = 4;
}

message OpenRequest {
  string volume = 1;
  Caller caller = 2;
  string path = 3;
  uint32 flags = 4;
}

message OpenReply {
  int32 status = 1;
}

message CreateRequest {
  string volume = 1;
  Caller caller = 2;
  string path = 3;
  uint32 flags = 4;
  uint32 mode = 5;
}

message CreateReply {
  int32 status = 1;
}

message ReadRequest {
  string volume = 1;
  string path = 2;
  int64 offset = 3;
  uint32 size = 4;
}

message ReadReply {
  bytes bytes = 1;
  int64 size = 2;
  int32 status = 3;
}

message WriteRequest {
  string volume = 1;
  string path = 2;
  bytes bytes = 3;
  int64 offset = 4;
}

message WriteReply {
  uint32 written = 1;
  int32 status = 2;
}

message FsyncRequest {
  string volume = 1;
  string path = 2;
  int64 flags = 3;
}

message FsyncReply {
  int32 status = 1;
}

message ReleaseRequest {
  string volume = 1;
  string path = 2;
}

message ReleaseReply {
}

message FlushRequest {
  string volume = 1;
  string path = 2;
}

message FlushReply {
  int32 status = 1;
}

message GetLkRequest {
  string volume = 1;
  string path = 2;
  uint64 owner = 3;
  uint32 flags = 4;
  FileLock lk = 5;
}

message GetLkReply {
  int32 status = 1;
  FileLock lk = 2;
}

message SetLkRequest {
  string volume = 1;
  string path = 2;
  uint64 owner = 3;
  uint32 flags = 4;
  FileLock lk = 5;
}

message SetLkReply {
  int32 status = 1;
}

message SetLkwRequest {
  string volume = 1;
  string path = 2;
  uint64 owner = 3;
  uint32 flags = 4;
  FileLock lk = 5;
}

message SetLkwReply {
  int32 status = 1;
}

service RpcFile {
  rpc Open (OpenRequest) returns (OpenReply);
  rpc Create (CreateRequest) returns (CreateReply);
  rpc Read (ReadRequest) returns (ReadReply);
  rpc Write (WriteRequest) returns (WriteReply);
  rpc Release (ReleaseRequest) returns (ReleaseReply);
  rpc Fsync (FsyncRequest) returns (FsyncReply);
  rpc Flush (FlushRequest) returns (FlushReply);
  rpc GetLk (GetLkRequest) returns (GetLkReply);
  rpc SetLk (SetLkRequest) returns (SetLkReply);
  rpc SetLkw (SetLkwRequest) returns (SetLkwReply);
}
